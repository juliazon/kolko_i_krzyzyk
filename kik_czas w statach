import math
from os import system, name
from time import sleep
import random
import time
 
plik = open("Statystyki.txt", "a") 
ruch = 1
global_proces_zmiany_komp = False
historyX = []
historyO = []
cofniecia = 0
gra_z_komp = False
ostatni_gracz = None

 
def poczatek():
    global wolne_pola
    czy_na_czas = int(input('czy chcesz grac na czas? (30 sek) 1- tak, 2- nie'))
    tryb_gry = int(input('2 graczy - 1, gra z komputerem - 2 '))
    #imiona

 
    if tryb_gry == 1:
        print("1 - pole 3x3")
        print("2 - pole 4x4")
        print("3 - pole 5x5")
 
        wybor = int(input())
 
        # sleep(1)
        clear()
        tab = []
        if wybor == 1:
            czas = time.time()
            for i in range(0, 9):
                tab.append(0)
 
            pole3x3(tab, 0, czy_na_czas, czas)
        elif wybor == 2:
            czas = time.time()
            for i in range(0, 16):
                tab.append(0)
            pole4x4(tab, 0, czy_na_czas, czas)
 
        elif wybor == 3:
            czas = time.time()
            for i in range(0, 25):
                tab.append(0)
 
            pole5x5(tab, 0, czy_na_czas, czas)
 
    elif tryb_gry == 2:
        print("GRA Z KOMPUTEREM")
        global gra_z_komp
        gra_z_komp = True
 
        print("1 - pole 3x3")
        print("2 - pole 4x4")
        print("3 - pole 5x5")
        wybor = int(input())
        gracz = int(input('input chcesz byc O - 1, X - 2 ? '))
        komputer = 2 if gracz == 1 else 1
 
        # sleep(1)
        clear()
        tab = []
        if wybor == 1:
            czas = time.time()
            for i in range(0, 9):
                tab.append(0)
            start = time.time()
            pole3x3_komp(tab, 0, (gracz, komputer), czy_na_czas, czas)
        elif wybor == 2:
            czas = time.time()
            for i in range(0, 16):
                tab.append(0)
            start = time.time()
            pole4x4_komp(tab, 0, (gracz, komputer), czy_na_czas, czas)
 
        elif wybor == 3:
            czas = time.time()
            for i in range(0, 25):
                tab.append(0)
            start = time.time()
            pole5x5_komp(tab, 0, (gracz, komputer), czy_na_czas, czas)
 
 
def zmienX(tab, ruch):
    global global_proces_zmiany_komp
    global ostatni_gracz
    global cofniecia
    ostatni_gracz = "X"
    if gra_z_komp:
        print("[Ruch gracza] Aby cofnąć ostatnią sekwencję wpisz 'cofnij'")
    else:
        print("[Ruch gracza] Aby cofnąć ostatni ruch wpisz 'cofnij'")
    od_usera = input()
    pole_zmiany = None
    try:
        pole_zmiany = int(od_usera)
    except:
        pole_zmiany = od_usera
 
    if pole_zmiany == "cofnij":
        wartosc = None
        if gra_z_komp:
            wartosc = historyX.pop()
        else:
            if ostatni_gracz == "X":
                wartosc = historyO.pop()
            else:
                wartosc = historyX.pop()
 
        global_proces_zmiany_komp = True
        tab[wartosc] = 0
        cofniecia += 1
 
    elif tab[pole_zmiany] == 0:
        tab[pole_zmiany] = 2
        historyX.append(pole_zmiany)
    else:
        ruch = ruch - 1
        zmienX(tab, ruch)
 
 
def zmienO(tab, ruch):
    global global_proces_zmiany_komp
    global ostatni_gracz
    global cofniecia
    ostatni_gracz = "O"
    if gra_z_komp:
        print("[Ruch gracza] Aby cofnąć ostatnią sekwencję wpisz 'cofnij'")
    else:
        print("[Ruch gracza] Aby cofnąć ostatni ruch wpisz 'cofnij'")
    od_usera = input()
    pole_zmiany = None
    try:
        pole_zmiany = int(od_usera)
    except:
        pole_zmiany = od_usera
 
    if pole_zmiany == "cofnij":
        wartosc = None
        if gra_z_komp:
            wartosc = historyO.pop()
        else:
            if ostatni_gracz == "O":
                wartosc = historyX.pop()
            else:
                wartosc = historyO.pop()
 
        global_proces_zmiany_komp = True
        tab[wartosc] = 0
        cofniecia += 1
    elif tab[pole_zmiany] == 0:
        tab[pole_zmiany] = 1
        historyO.append(pole_zmiany)
 
    else:
        ruch = ruch - 1
        zmienO(tab, ruch)
 
 
def zmienX_komp(tab, ruch):
    global global_proces_zmiany_komp
    if global_proces_zmiany_komp == True:
        wartosc = historyX.pop()
        global_proces_zmiany_komp = False
        tab[wartosc] = 0
    else:
        wybor_kompa = random.randint(0, len(tab) - 1)
        pole_zmiany = wybor_kompa
        if tab[pole_zmiany] == 0:
            tab[pole_zmiany] = 2
            historyX.append(pole_zmiany)
 
        else:
            zmienX_komp(tab, ruch)
 
 
def zmienO_komp(tab, ruch):
    global global_proces_zmiany_komp
    if global_proces_zmiany_komp == True:
        wartosc = historyO.pop()
        global_proces_zmiany_komp = False
        tab[wartosc] = 0
    else:
        wybor_kompa = random.randint(0, len(tab) - 1)
        pole_zmiany = wybor_kompa
        if tab[pole_zmiany] == 0:
            tab[pole_zmiany] = 1
            historyO.append(pole_zmiany)
        else:
            zmienO_komp(tab, ruch)
 
 
def czy_koniec(czas):
    end = time.time()
    if (end - czas) > 30:
        przegrana(czas)
    print(end - czas)
 
 
def pole3x3(tab, ruch, czy_na_czas, czas):
    limit_krokow_standard = 9
    limit_krokow = limit_krokow_standard + cofniecia
    na_usera = int(math.sqrt(limit_krokow))
 
    i = 0
    while i < limit_krokow:
        limit_krokow = limit_krokow_standard + cofniecia
        i += 1
        # for i in range(0, 9):
        pom = 0
        clear()
        czy3(tab, czas)
 
        for i in range(0, 3):
            for j in range(0, 3):
                if tab[pom] == 0:
                    print(" |", end='\t')
                    pom = pom + 1
                elif tab[pom] == 1:
                    print("O|", end='\t')
                    pom = pom + 1
                elif tab[pom] == 2:
                    print("X|", end='\t')
                    pom = pom + 1
            print(" ")
            for k in range(0, 3):
                print("-", end="\t")
            print("")
        if czy_na_czas == 1:
            czy_koniec(czas)
 
        if ruch % 2 == 0:
            ruch = ruch + 1
            zmienO(tab, ruch)
        elif ruch % 2 == 1:
            ruch = ruch + 1
            zmienX(tab, ruch)
 
 
def pole4x4(tab, ruch, czy_na_czas, czas):
    for i in range(0, 16):
        pom = 0
        clear()
        czy4(tab, czas)
 
        for i in range(0, 4):
            for j in range(0, 4):
                if tab[pom] == 0:
                    print(" |", end='\t')
                    pom = pom + 1
                elif tab[pom] == 1:
                    print("O|", end='\t')
                    pom = pom + 1
                elif tab[pom] == 2:
                    print("X|", end='\t')
                    pom = pom + 1
            print(" ")
            for k in range(0, 4):
                print("-", end="\t")
            print("")
 
        if czy_na_czas == 1:
            czy_koniec(czas)
 
        if ruch % 2 == 0:
            ruch = ruch + 1
            zmienO(tab, ruch)
        elif ruch % 2 == 1:
            ruch = ruch + 1
            zmienX(tab, ruch)
 
 
def pole5x5(tab, ruch, czy_na_czas, czas):
    for i in range(0, 25):
        pom = 0
        clear()
        czy5(tab, czas)
 
        for i in range(0, 5):
            for j in range(0, 5):
                if tab[pom] == 0:
                    print(" |", end='\t')
                    pom = pom + 1
                elif tab[pom] == 1:
                    print("O|", end='\t')
                    pom = pom + 1
                elif tab[pom] == 2:
                    print("X|", end='\t')
                    pom = pom + 1
            print(" ")
            for k in range(0, 5):
                print("-", end="\t")
            print("")
 
        if czy_na_czas == 1:
            czy_koniec(czas)
 
        if ruch % 2 == 0:
            ruch = ruch + 1
            zmienO(tab, ruch)
        elif ruch % 2 == 1:
            ruch = ruch + 1
            zmienX(tab, ruch)
 
 
def pole3x3_komp(tab, ruch, gracze, czy_na_czas, czas):
    limit_krokow_standard = 9
    limit_krokow = limit_krokow_standard + cofniecia
    na_usera = int(math.sqrt(limit_krokow))
 
    i = 0
    while i < limit_krokow:
        limit_krokow = limit_krokow_standard + cofniecia
        i += 1
        pom = 0
        clear()
        czy3(tab, czas)
        for i in range(0, na_usera):
            for j in range(0, na_usera):
                if tab[pom] == 0:
                    print(" |", end='\t')
                    pom = pom + 1
                elif tab[pom] == 1:
                    print("O|", end='\t')
                    pom = pom + 1
                elif tab[pom] == 2:
                    print("X|", end='\t')
                    pom = pom + 1
            print(" ")
            for k in range(0, na_usera):
                print("-", end="\t")
            print("")
 
        if czy_na_czas == 1:
            czy_koniec(czas)
 
        gracz, komputer = gracze
        if gracz == 1:
            if ruch % 2 == 0:
                ruch = ruch + 1
                
                zmienO(tab, ruch)
            elif ruch % 2 == 1:
                ruch = ruch + 1
                zmienX_komp(tab, ruch)
                
        else:
            if ruch % 2 == 0:
                ruch = ruch + 1
                zmienO_komp(tab, ruch)
                
            elif ruch % 2 == 1:
                ruch = ruch + 1
                zmienX(tab, ruch)
                
 
 
def pole4x4_komp(tab, ruch, gracze, czy_na_czas, czas):
    limit_krokow_standard = 16
    limit_krokow = limit_krokow_standard + cofniecia
    na_usera = int(math.sqrt(limit_krokow))
 
    i = 0
    while i < limit_krokow:
        limit_krokow = limit_krokow_standard + cofniecia
        i += 1
        # for i in range(0, 16):
        pom = 0
        clear()
        czy4(tab, czas)
 
        for i in range(0, na_usera):
            for j in range(0, na_usera):
                if tab[pom] == 0:
                    print(" |", end='\t')
                    pom = pom + 1
                elif tab[pom] == 1:
                    print("O|", end='\t')
                    pom = pom + 1
                elif tab[pom] == 2:
                    print("X|", end='\t')
                    pom = pom + 1
            print(" ")
            for k in range(0, na_usera):
                print("-", end="\t")
            print("")
 
        if czy_na_czas == 1:
            czy_koniec(czas)
 
        gracz, komputer = gracze
        if gracz == 1:
            if ruch % 2 == 0:
                ruch = ruch + 1
                zmienO(tab, ruch)
            elif ruch % 2 == 1:
                ruch = ruch + 1
                zmienX_komp(tab, ruch)
        else:
            if ruch % 2 == 0:
                ruch = ruch + 1
                zmienO_komp(tab, ruch)
            elif ruch % 2 == 1:
                ruch = ruch + 1
                zmienX(tab, ruch)
 
 
def pole5x5_komp(tab, ruch, gracze, czy_na_czas, czas):
    limit_krokow_standard = 25
    limit_krokow = limit_krokow_standard + cofniecia
    na_usera = int(math.sqrt(limit_krokow))
 
    i = 0
    while i < limit_krokow:
        limit_krokow = limit_krokow_standard + cofniecia
        i += 1
        # for i in range(0, 25):
        pom = 0
        clear()
        czy5(tab, czas)
 
        for i in range(0, na_usera):
            for j in range(0, na_usera):
                if tab[pom] == 0:
                    print(" |", end='\t')
                    pom = pom + 1
                elif tab[pom] == 1:
                    print("O|", end='\t')
                    pom = pom + 1
                elif tab[pom] == 2:
                    print("X|", end='\t')
                    pom = pom + 1
            print(" ")
            for k in range(0, na_usera):
                print("-", end="\t")
            print("")
 
        if czy_na_czas == 1:
            czy_koniec(czas)
 
        gracz, komputer = gracze
        if gracz == 1:
            if ruch % 2 == 0:
                ruch = ruch + 1
                zmienO(tab, ruch)
            elif ruch % 2 == 1:
                ruch = ruch + 1
                zmienX_komp(tab, ruch)
        else:
            if ruch % 2 == 0:
                ruch = ruch + 1
                zmienO_komp(tab, ruch)
            elif ruch % 2 == 1:
                ruch = ruch + 1
                zmienX(tab, ruch)
 
 
def czy3(tab,czas):
    for i in range(0, 3):
        if (tab[i * 3] == tab[i * 3 + 1] ==
            tab[i * 3 + 2]) and tab[i * 3] != 0:
            wygrana(czas)
 
    for i in range(0, 3):
        if (tab[i] == tab[i + 3] ==
            tab[i + 6]) and tab[i] != 0:
            wygrana(czas)
 
    if (tab[2] == tab[4] == tab[6]) and tab[2] != 0:
        wygrana(czas)
    elif (tab[0] == tab[4] == tab[8]) and tab[0] != 0:
        wygrana(czas)
 
 
def czy4(tab, czas):
    for i in range(0, 4):
        if (tab[i * 4] == tab[i * 4 + 1] ==
            tab[i * 4 + 2] == tab[i * 4 + 3]) and tab[i * 4] != 0:
            wygrana(czas)
 
    for i in range(0, 4):
        if (tab[i] == tab[i + 4] ==
            tab[i + 8] == tab[i + 12]) and tab[i] != 0:
            wygrana(czas)
 
    if (tab[3] == tab[6] == tab[9] == tab[12]) and tab[3] != 0:
        wygrana(czas)
    if (tab[0] == tab[5] == tab[10] == tab[15]) and tab[0] != 0:
        wygrana(czas)
 
 
def czy5(tab, czas):
    for i in range(0, 5):
        if (tab[i * 5] == tab[i * 5 + 1] ==
            tab[i * 5 + 2] == tab[i * 5 + 3] == tab[i * 5 + 4]) and tab[i * 5] != 0:
            wygrana(czas)
 
    for i in range(0, 5):
        if (tab[i] == tab[i + 5] ==
            tab[i + 10] == tab[i + 15] == tab[i + 20]) and tab[i] != 0:
            wygrana(czas)
 
    if (tab[4] == tab[8] == tab[12] == tab[16] == tab[20]) and tab[4] != 0:
        wygrana(czas)
    elif (tab[0] == tab[6] == tab[12] == tab[18] == tab[24]) and tab[0] != 0:
        wygrana(czas)
 
 
def wygrana(czas):
    end = time.time()
    plik.write("Wygrano grę "  +"czas: \n" + str(end - czas))
    plik.close
    clear()
    print("Wyygrales :)")
    print()
 
 
def przegrana(czas):
    clear()
    end = time.time()
    plik.write("Przegrano grę "  +"czas: \n" + str(end - czas) )
    plik.close
    print("przegrales :(")
 
 
def clear():
    if name == 'nt':
        _ = system('cls')
    else:
        _ = system('clear')
 
 
def main():
    poczatek()
 
 
main()
